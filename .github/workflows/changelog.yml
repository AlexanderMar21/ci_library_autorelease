name: Changelog Workflow
on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

jobs:
  changelog:
    permissions: write-all
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            return {
              state: pr.data.state,
              reviews: pr.data.reviews
            }

      - name: Check if PR is approved
        run: |
          # Get the PR status and reviews from the API response
          PR_STATUS=$(echo "${{ steps.pr-info.outputs.result.state }}")
          REVIEWS=$(echo "${{ steps.pr-info.outputs.result.reviews }}")

          # Check if the PR is approved
          if echo "$PR_STATUS" | grep -q "closed"; then
            # If the PR is closed, save the boolean value "false" to an environment variable
            echo "PR_APPROVED=false" >> $GITHUB_ENV
          elif echo "$REVIEWS" | jq -e 'any(.[] | select(.state == "CHANGES_REQUESTED"))' >/dev/null; then
            # If any review is in the "CHANGES_REQUESTED" state
            echo "Pull request has is marked as changes requested. Exiting..."
            exit 1
          elif echo "$REVIEWS" | jq -e 'any(.[] | select(.state == "APPROVED"))' >/dev/null; then
            # If any review is in the "APPROVED" state, save the boolean value "true" to an environment variable
            echo "Pull request is approved"
          else
            # If there are no reviews
            echo "Pull request is has not been approved. Exiting..."
            exit 1
          fi
      - name: Check if tag exists from package.json version # check if tag from package.json version already exists
        run: |
          # Get the package version from package.json
          PACKAGE_VERSION=$(jq -r '.version' package.json)

          # Check if a tag with the current version exists
          if git rev-parse "refs/tags/v${PACKAGE_VERSION}" >/dev/null 2>&1; then
            echo "The tag with the version v$PACKAGE_VERSION already exists"
            exit 1
          else
            # If no tag exists
            echo "The tag does not exist"
          fi
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: setup git config
        run: |
          git config user.name "Autorelease Bot"
          git config user.email "<>"
      - name: Pubish Release
        env:
          GITHUB_TOKEN: ${{ secrets.AUTO_RELEASE_TOKEN }}
        run: |
          yarn changelog
          git add CHANGELOG.md
          git commit -m "chore(pre-release): v${{ steps.package-version.outputs.current-version }} CHANGELOG"
          git push origin HEAD:${{ github.head_ref }} --no-verify
